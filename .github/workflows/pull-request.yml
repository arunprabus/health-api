name: Pull Request Validation

on:
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint || echo "Linting skipped - add linting in future"
      
    - name: Create test environment file
      run: |
        echo "COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}" > .env.test
        echo "COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}" >> .env.test
        echo "AWS_REGION=us-east-1" >> .env.test
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.test
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env.test
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.test
        echo "NODE_ENV=test" >> .env.test
        
    - name: Run unit tests
      working-directory: ./tests
      run: |
        npm ci
        NODE_OPTIONS="--experimental-vm-modules" npm test
      env:
        NODE_ENV: test
        COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
        AWS_REGION: us-east-1
      
    - name: Prepare release version
      id: prepare-release
      run: |
        VERSION=$(node -p "require('./package.json').version")
        if [[ $VERSION == *"-SNAPSHOT"* ]]; then
          echo "Converting SNAPSHOT version $VERSION to release version"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          npm run version:release
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Prepared release version: $NEW_VERSION"
          git add package.json
          git commit -m "chore: prepare release version $NEW_VERSION"
          git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.head_ref }}
          echo "version-updated=true" >> $GITHUB_OUTPUT
          echo "release-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Version $VERSION is already a release version"
          echo "version-updated=false" >> $GITHUB_OUTPUT
          echo "release-version=$VERSION" >> $GITHUB_OUTPUT
        fi