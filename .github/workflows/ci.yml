name: Build and Push Health API

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: health_api_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      working-directory: ./tests
      run: |
        npm ci
        npm test
      env:
        NODE_ENV: test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create .env file
      run: |
        # Sensitive secrets from GitHub Secrets
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}" >> .env
        echo "COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}" >> .env
        
        # Non-sensitive variables from GitHub Variables
        echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
        echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
        echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
        echo "DB_USER=${{ vars.DB_USER }}" >> .env
        echo "AWS_REGION=${{ vars.AWS_REGION }}" >> .env
        echo "S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}" >> .env
        echo "S3_REGION=${{ vars.S3_REGION }}" >> .env
        echo "USE_COGNITO=${{ vars.USE_COGNITO }}" >> .env
        echo "PORT=${{ vars.PORT }}" >> .env
        echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max