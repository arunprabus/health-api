name: CI Pipeline

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: health_api_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      working-directory: ./tests
      run: |
        npm ci
        npm test
      env:
        NODE_ENV: test

  build-snapshot:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate snapshot tag
      id: image-tag
      run: |
        VERSION=$(node -p "require('./package.json').version")
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        TAG="${VERSION}-${TIMESTAMP}"
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push snapshot image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:snapshot
        cache-from: type=gha
        cache-to: type=gha,mode=max

  smoke-tests:
    needs: build-snapshot
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: health_api_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run smoke tests
      working-directory: ./tests
      run: |
        npm ci
        node smoke-tests.js
      env:
        NODE_ENV: test
        IMAGE_TAG: ${{ needs.build-snapshot.outputs.image-tag }}