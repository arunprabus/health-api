name: CI Pipeline

on:
  # push:
  #   branches: [ main, 'fet-*' ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: arunprabusiva/health-api

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: health_api_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint || echo "Linting skipped - add linting in future"
      
    - name: Run security audit
      run: npm audit --production --audit-level=high || echo "Security audit warnings found"
      
    - name: Skip tests temporarily
      run: echo "Tests temporarily skipped - will be fixed in a separate PR"
      
    - name: Generate snapshot tag
      id: image-tag
      run: |
        VERSION=$(node -p "require('./package.json').version")
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        TAG="${VERSION}-${TIMESTAMP}"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Generate image tags
      id: meta
      run: |
        VERSION=$(node -p "require('./package.json').version")
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        BRANCH=${GITHUB_REF##*/}
        
        if [[ "$BRANCH" == "main" ]]; then
          if [[ $VERSION == *"-SNAPSHOT"* ]]; then
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:snapshot,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          else
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}" >> $GITHUB_OUTPUT
          fi
        else
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH}-snapshot,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH}-${TIMESTAMP}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        
    - name: Determine environment
      id: env
      run: |
        BRANCH=${GITHUB_REF##*/}
        if [[ "$BRANCH" == "main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif [[ "$BRANCH" == "staging" ]]; then
          echo "environment=test" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
        
    - name: Trigger deployment
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.INFRA_REPO_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/${{ github.repository_owner }}/dev2prod-healthapp/dispatches \
          -d '{
            "event_type": "app-deploy",
            "client_payload": {
              "app": "health-api",
              "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest",
              "environment": "${{ steps.env.outputs.environment }}",
              "commit": "${{ github.sha }}",
              "actor": "${{ github.actor }}"
            }
          }'